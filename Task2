{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled3.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMnsQrGbZMbmYPR/7wt0o4G",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Thulisile2/Demo_GitHub/blob/main/Task2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "u03EWDdWlnoY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 1a"
      ],
      "metadata": {
        "id": "qmRhPJDeEn92"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "haH8f6sdD_HC",
        "outputId": "b173bd47-94d4-4301-95d2-9f2fa15ae84f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fa39c6c2950>]"
            ]
          },
          "metadata": {},
          "execution_count": 51
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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WMLDw9m7dy/btm3j448/rva5VieAS61v4a8CpeZJRQIugHviL2Yw1wPPyspi8+bNvPzyyxgM9v/uyMhIBg8eDMAnn3xCjx49iIuL495778VqtTrO8//+7/+IjY3l6quv5ujRo2zatIkVK1bw+OOPExcXR1ZWFllZWQwaNIhu3brRp08fdu3a5fi53XffffTs2ZNJkyZV+L59+/aRkJBATEwMTz/9dBX+14SouUCceVKK1tpr/7p166bLyszMPO+1yuzf/6pet86o161Dr1tn1Pv3v1ql7cvToEEDXVBQoNu3b6/z8/P11KlT9XPPPae11nr06NH6s88+K/VerbVet26dDg0N1YcPH9aFhYX64osv1s8++6zWWuvp06frRx55RGut9YgRI/SGDRu01lpnZ2frK6+8Umut9XPPPae7du2q//jjD8f+Bg8erLXWetKkSY7ttdb6xIkTWmut8/LytNZaWywW3a9fP52RkaG11rpfv356y5Yt5Z7b8uXL9bBhw8r9XmZmph4yZIg2m81aa63//ve/67lz52qttQb0ihUrtNZaP/744/qll14q9+fRv39/vWfPHq211t99952+9tprHe8bPHiwtlgslb7v//2//+c45rvvvuv4+Vamqp8ZISqTn79J79//qs7P3+TrplQI2KrLiakBNwul5C9myWopd/3FDPZ64OVJSUlh27ZtdO/eHYCzZ8/SokULAEwmk+OKoFu3biQnJ5+3/ZkzZ9i0aRPDhw93vOa8EnT48OEYjcZK37dx40bHFcbIkSN54oknqn0+QlRHoM08cRZwAdyTczUnTJhA165dufvuux2vuaseeL169c47XnXqgW/ZsoUmTZowZswYl+qBd+zYkYyMDKxWK0ajsdT3tNaMHj2aKVOmnLddSEgI9hsvgdFoLDePbbPZCAsLq7BEbsn5Xeh9JccRwlsCreZJRQIuBw72IN6+/WS3/+CDsR54VFQU8fHxPPfcc457TO7fv59Vq1aRlJTE559/Tm5uLmCv+52dnV3p/ho1asTp06cB+1VLZGQkn332GWD/g5CRkXHeNpW9r1evXo6rjQULFrh0TkLURKDPPHEWkAHck4KxHvjs2bM5evQoHTp0oFOnTowZM4YWLVoQHR3Nyy+/zMCBA+ncuTMDBgwgJyen0n3dcccdTJ06lS5dupCVlcWCBQuYM2cOsbGx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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 1.  First derivative\n",
        "# f'(x)=x**3 -2x -1\n",
        "# Forward difference\n",
        "# y_n' = (y_{n+1} - y_n)/h \n",
        "# h>0\n",
        "\n",
        "# 2. First derivative\n",
        "# f'(x)=x**3 -2x -1\n",
        "# Backward difference\n",
        "# y_n' = (y_n - y_{n-1})/h \n",
        "# h<0\n",
        "\n",
        "# 3. First derivative\n",
        "# f'(x)=x**3 -2x -1\n",
        "# Centered difference\n",
        "# y_n' = (y_{n+1} - y_{n-1})/h \n",
        "# h=0\n",
        "\n",
        "x = np.linspace(-2,3,100)\n",
        "\n",
        "def func(x):\n",
        "  y = x**3 -2*x -1\n",
        "  return y\n",
        "\n",
        "#print(func(-2))\n",
        "\n",
        "def sec_d(f,h,x):\n",
        "  h = x[1] - x[0]\n",
        "  y_p = (f(x+h) - (f(x)))/h\n",
        "  return y_p\n",
        "\n",
        "h = 0.1\n",
        "\n",
        "def sec_d1(f,h_1,x):\n",
        "  h_1 = x[1] - x[0]\n",
        "  y_p1 = (f(x) - (f(x-h_1)))/h_1\n",
        "  return y_p1\n",
        "\n",
        "h_1 = -0.1\n",
        "\n",
        "def sec_d2(f,h_2,x):\n",
        "  h_2 = x[1] - x[0]\n",
        "  y_p2 = (f(x+h_2) - (f(x-h_2)))/h_2\n",
        "  return y_p2\n",
        "\n",
        "h_2 = 0\n",
        "\n",
        "\n",
        "#plt.figure()\n",
        "#plt.plot(x,func(x),'--r')\n",
        "\n",
        "plt.figure()\n",
        "plt.plot(x,x**3 -2*x -1,'k',label = 'Theoretical')\n",
        "plt.plot(x,sec_d(func,h,x),'.r',label = 'Numerical_Forward')\n",
        "plt.plot(x,sec_d1(func,h_1,x),'.b',label = 'Numerical_Backward')\n",
        "plt.plot(x,sec_d2(func,h_2,x),'.y',label = 'Numerical_Centered')\n",
        "plt.legend()\n",
        "\n",
        "#error\n",
        "plt.figure()\n",
        "plt.plot(x,x**3 -2*x -1 - sec_d(func,h,x),'*')\n",
        "plt.plot(x,x**3 -2*x -1 - sec_d1(func,h_1,x),'-')\n",
        "plt.plot(x,x**3 -2*x -1 - sec_d2(func,h_2,x),'--')\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 1b"
      ],
      "metadata": {
        "id": "xTF8KcFwEkCD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import cmath\n",
        "#import math\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "#math.function_name(parameter)\n",
        "\n",
        "# 1.  First derivative\n",
        "# f'(x)=1-xmath.tanh**2(x)\n",
        "# Forward difference\n",
        "# y_n' = (y_{n+1} - y_n)/h \n",
        "# h>0\n",
        "\n",
        "# 2. First derivative\n",
        "# f'(x)=1-xmath.tanh**2(x)\n",
        "# Backward difference\n",
        "# y_n' = (y_n - y_{n-1})/h \n",
        "# h<0\n",
        "\n",
        "# 3. First derivative\n",
        "# f'(x)=1-xmath.tanh**2(x)\n",
        "# Centered difference\n",
        "# y_n' = (y_{n+1} - y_{n-1})/h \n",
        "# h=0\n",
        "\n",
        "#x = np.linspace(-5,5,100)\n",
        "#x = complex(-5,5)\n",
        "\n",
        "#f2 = np.vectorize(int)\n",
        "#y = 1-cmath.tanh(x)\n",
        "#return y\n",
        "\n",
        "def func(x):\n",
        "    return int(x)\n",
        "f2 = np.vectorize(func)\n",
        "x = np.arange(-5, 5, 100)\n",
        "y = 1-cmath.tanh(x)\n",
        "#return y\n",
        "\n",
        "\n",
        "def sec_d(f,h,x):\n",
        "  #h = x[1] - x[0]\n",
        "  y_p = (f(x+h) - (f(x)))/h\n",
        "  return y_p\n",
        "\n",
        "h = 0.1\n",
        "\n",
        "def sec_d1(f,h_1,x):\n",
        " # h_1 = x[1] - x[0]\n",
        "  y_p1 = (f(x) - (f(x-h_1)))/h_1\n",
        "  return y_p1\n",
        "\n",
        "h_1 = -0.1\n",
        "\n",
        "def sec_d2(f,h_2,x):\n",
        "  #h_2 = x[1] - x[0]\n",
        "  y_p2 = (f(x+h_2) - (f(x-h_2)))/h_2\n",
        "  return y_p2\n",
        "\n",
        "#h_2 = 0\n",
        "\n",
        "plt.figure()\n",
        "plt.plot(x,x**3 -2*x -1,'k',label = 'Theoretical')\n",
        "plt.plot(x,sec_d(func,h,x),'.r',label = 'Numerical_Forward')\n",
        "plt.plot(x,sec_d1(func,h_1,x),'.b',label = 'Numerical_Backward')\n",
        "plt.plot(x,sec_d2(func,h_2,x),'.y',label = 'Numerical_Centered')\n",
        "plt.legend()\n",
        "\n",
        "#error\n",
        "plt.figure()\n",
        "plt.plot(x,x**3 -2*x -1 - sec_d(func,h,x),'*')\n",
        "plt.plot(x,x**3 -2*x -1 - sec_d1(func,h_1,x),'-')\n",
        "plt.plot(x,x**3 -2*x -1 - sec_d2(func,h_2,x),'--')\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "gpygsFUuluy_",
        "outputId": "43e521b2-32b4-4a71-e5eb-66b61d2d97ba"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fa7119d2450>]"
            ]
          },
          "metadata": {},
          "execution_count": 26
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 2"
      ],
      "metadata": {
        "id": "Y3GaJ0nRlsA3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import math\n",
        "import scipy as sp\n",
        "import sympy as smp\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.integrate import quad\n",
        "#from scipy.integrate import cumulative_trapezoid \n",
        "\n",
        "\n",
        "# 1. Trapezoidal rule\n",
        "# f = smp.sqrt(1 + (x**2))\n",
        "# smp.integrate(f,(x,1,4)) \n",
        "# smp.integrate(a((f(x_0) + 2*f(x_1) + 2*f(x_2) + 2*f(x_3) + 2*f(x_4)))\n",
        "# [1,4]\n",
        "\n",
        "# 2. Simpson's rule\n",
        "# f = smp.sqrt(1 + (x**2))\n",
        "# smp.integrate(f,(x,1,4))\n",
        "# smp.integrate(b((f(x_0) + 4*f(x_1) + 2*f(x_2) + 4*f(x_3) + 2*f(x_4)))\n",
        "# [1,4]\n",
        "\n",
        "#x = np.linspace(1,4,100)\n",
        "\n",
        "x = smp.symbols('x', real = True)\n",
        "\n",
        "f = smp.sqrt(1 + (x**2))\n",
        "#smp.sqrt(1 + (x**2))\n",
        "smp.integrate(f,(x,1,4))\n",
        "\n",
        "a == 0.1\n",
        "x_o == 0\n",
        "x_1 == 1\n",
        "x_2 == 2\n",
        "x_3 == 3\n",
        "x_4 == 4\n",
        "\n",
        "def func():\n",
        "   func = (a((f(x_o) + 2*f(x_1) + 2*f(x_2) + 2*f(x_3) + 2*f(x_4))))\n",
        "   return func\n",
        "\n",
        "#smp.integrate(f,(x,1,4)).simplify())#\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "WMI9C-vqlL2p"
      },
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 3"
      ],
      "metadata": {
        "id": "BN6a5JMaQxpw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import math\n",
        "import scipy as sp\n",
        "import sympy as smp\n",
        "import matplotlib.pyplot as plt\n",
        "from numpy.linalg import eig\n",
        "\n",
        "#Bisection\n",
        "x_min = -1\n",
        "x_max = 4\n",
        "x_A = (x_min + x_max)/2\n",
        "print(x_A)\n",
        "\n",
        "def Bisection_method(func, x_max , x_min, error):\n",
        "  def f(x):\n",
        "    eval(func)\n",
        "    return f\n",
        "  error = abs(x_max - x_min)\n",
        "\n",
        "  while error > error_accept :\n",
        "    x_A = (x_min + x_max)/2\n",
        "\n",
        "    if f(x_max) * f(x_min) >= 0:\n",
        "      print(\"no root\")\n",
        "      quit()\n",
        "    elif f(x_A) * f(x_max) :\n",
        "        x_min = x_max\n",
        "        error = abs(x_min -x_max)\n",
        "\n",
        "    elif f(x_A) * f(x_min) <0 :\n",
        "        x_max = x_A\n",
        "        error = abs(x_min - x_max)\n",
        "      \n",
        "    else :\n",
        "        print(\"wrong output\")\n",
        "        quit()\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#Secant\n",
        "n = 0\n",
        "def func():\n",
        "  while n >= 0 :\n",
        "    m = (f_(n-1) - f_n)/(x_(n-1) -x_n)\n",
        "    f = (x_n*f_(n-1) - x_(n-1)*f_n)/(x_(n-1) - f_n)\n",
        "\n",
        "\n",
        "A = np.array([[4, 1], \n",
        "              [2, -1]])\n",
        "\n",
        "I = np.array([0,0,0])\n",
        "\n",
        "\n",
        "\n",
        "def normalize(x):\n",
        "    fac = abs(x).max()\n",
        "    x_n = x / x.max()\n",
        "    return fac, x_n\n",
        "\n",
        "x = np.array([1, 1])\n",
        "for i in range(4):\n",
        "    x = np.dot(a, x)\n",
        "    lambda_1, x = normalize(x)\n",
        "    \n",
        "print('Eigenvalue:', lambda_1)\n",
        "print('Eigenvector:', x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E5EKMt3fQ0L-",
        "outputId": "461df3eb-a322-4400-f353-740c06d3d4f5"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.5\n",
            "Eigenvalue: 4.354838709677419\n",
            "Eigenvector: [1.         0.37777778]\n"
          ]
        }
      ]
    }
  ]
}